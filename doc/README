{{{
#!NewsFlash
== maintainer information ==
||name||email adress||
||Arne Franken||arne.franken@coremedia.com||

== projects using this contribution ==
||projectname||contact||
|| BILD || Arne Franken ||

== technical links ==
 * [https://contributions.coremedia.com/hudson/job/TimeMeasurement/ continuous integration]
 * [https://contributions.coremedia.com/svn-shared/timemeasurement/trunk/ SVN]
 * [https://contributions.coremedia.com/mailman/listinfo/timemeasurement/ mailing list]
}}}

= TimeMeasurement =

== WHAT IT IS ==

Using !TimeMeasurement, you can easily measure the performance of your code.
It integrates into every Java application, not just applications based on !CoreMedia software.
Dependencies are kept to a minimum, only the JETM library is needed.

You can measure your code performance by either
 * Manually putting measurement points into your code
 * Using AspectJ
 * Using Spring AOP

!TimeMeasurement wraps the JETM !TimeMeasurement library which automatically aggregates results, detects nested calls and calculates min, max and average values.

Results can be accessed using JMX MBeans, or using static Java methods from your code.

Finally, the measurement is only invoked if the Java !SystemProperty {{{timemeasurement.enabled=true}}} is set, otherwise all
measurement points in the code are ignored. It should be safe to leave the measurement points in your production code.

== CHANGELOG ==

'''New with version 1.4''':
 * TimeMeasurement can write results to the application's logfile using {{{TimeMeasurement.toLog()}}}. The method can also be triggered via MBean.
 * MBeans are now registered at all available MBean servers.
 * Measuring of nested methods can be displayed as such. Set !SystemProperty {{{timemeasurement.useMillis=true}}} to use:
 {{{
|-------------------|---|---------|--------|--------|--------|
| Measurement Point | # | Average |   Min  |   Max  |  Total |
|-------------------|---|---------|--------|--------|--------|
| testUseNested     | 1 |  10.318 | 10.318 | 10.318 | 10.318 |
|   nestedMethod    | 1 |   5.102 |  5.102 |  5.102 |  5.102 |
|-------------------|---|---------|--------|--------|--------|
}}}
 * Measuring is possible in milliseconds instead of nanoseconds. Set !SystemProperty {{{timemeasurement.useNested=true}}} to use:
 {{{
|-------------------|---|---------|-----|-----|-------|
| Measurement Point | # | Average | Min | Max | Total |
|-------------------|---|---------|-----|-----|-------|
| testUseMillis     | 1 |       6 |   6 |   6 |     6 |
|-------------------|---|---------|-----|-----|-------|
}}}

'''New with version 1.3''':
 * TimeMeasurement can be used with {{{Spring AOP}}} out of the box.
 * You can enable the time measurement via JMX, even if the !SystemProperty is not set.

== HOW IT WORKS ==

!TimeMeasurement provides static wrapper methods that delegate to the JETM !TimeMeasurement library if the system property is set to true.
!TimeMeasurement also registers two MBeans which provide easy access to the class itself (to start/stop/reset measurement) and to the measurement results.

This example code shows how to use the class:

{{{
	EtmPoint etmPoint = null;
	try
	{
		etmPoint = TimeMeasurement.start("measurementPointName");
		//do something
	}
	finally
	{
		TimeMeasurement.stop(etmPoint);
	}
}}}

'''Remember to always stop the !EtmPoint in a finally block. If an exception occurs in your code, the point will probably never be stopped otherwise.'''

As a convenience, the !TimeMeasurement class provides three ways to get the measurement results without using JMX:

 * {{{TimeMeasurement.toStdOut()}}}
   * prints the formatted results to !StdOut.

 * {{{TimeMeasurement.getMeasurementResults()}}}
   * returns the formatted results as a String.

 * {{{TimeMeasurement.toLog()}}}
   * logs the formatted results. Using JETM log implementation guessing. Works with Log4j and java.util.logging. Uses !StdOut as a fallback. The method can also be triggered via MBean.


== ASPECTJ ==

This contribution also provides a simple AspectJ integration for measuring methods.
To use AspectJ, you have to depend on the needed contribution-modules and compile your code using the "aspectj-maven-plugin".

Then you can simply annotate the method you want to measure:

{{{
	@Measure("measurementPointName")
	measureMethod()
	{
		//do something
	}
}}}

The aspect takes care of opening and closing a measurement point around your method, the point is closed in a finally-block.

== SPRING AOP ==

'''New with version 1.3'''

This contribution also provides a simple Spring AOP compliant aspect for measuring methods.
To use the Spring AOP timemeasurement, you have to depend on the needed contribution modules "timemeasurement-core" and "timemeasurement-aspect" as well as Spring and Spring AOP dependencies. You '''do not''' need the aspectj-maven-plugin! In your Spring XML context configuration you can then add the <aop:config> element as in the following example:

{{{
<bean id="timemeasurementAspectBean"
      class="com.coremedia.contribution.timemeasurement.aspect.TimeMeasurementAspect"/>

  <aop:config>
    <aop:aspect id="timemeasurementAspect" ref="timemeasurementAspectBean">
      <aop:pointcut id="myMethodPointcut"
                    expression="execution(void com.mycompany.myMethod(..))"/>
      <aop:around
           pointcut-ref="myMethodPointcut"
           method="profile"/>
    </aop:aspect>
  </aop:config>
}}}
In this example we define a pointcut for the execution of the method com.mycompany.myMethod(..) with any kind of parameters and return type void. The method in !TimeMeasurementAspect used for measuring is called "profile" and it takes care of opening and closing a measurement point around your method, the point is closed in a finally-block.

For more information about Spring AOP please refer to [http://static.springsource.org/spring/docs/2.0.x/reference/aop.html].

If timemeasurement is enabled (either via !SystemProperty or JMX, see above for details) you will receive a measurement result like this:

{{{
|--------------------------------|---|---------|-------|-------|-------|
| Measurement Point              | # | Average |  Min  |  Max  | Total |
|--------------------------------|---|---------|-------|-------|-------|
| com.mycompany.myMethod(..)     | 1 |   2.921 | 2.921 | 2.921 | 2.921 |
|--------------------------------|---|---------|-------|-------|-------|
}}}

'''Attention: if you use nested Spring XML files with several imports (like in !CoreMedia 6), please be aware of a bug in Spring that leads to multiple parsing/execution of XML files ([https://jira.springsource.org/browse/SPR-1142]). The result can be that the aspect is applied several times and time measurement is executed more than once per method'''

== MAVEN CONFIGURATION ==

The Contribution consists of four separate Artifacts:

 * timemeasurement-core
   * contains the !TimeMeasurement class, JMX registration and the dependency to the JETM library. You'll need this artifact if you want to use the contribution at all.
 * timemeasurement-annotation
   * contains the AspectJ annotation. You only need the artifact if you want to use the AspectJ integration.
 * timemeasurement-aspect
   * contains the AspectJ and the Spring AOP aspect that wraps around annotated methods. You only need the artifact if you want to use the AspectJ or Spring AOP integration.
 * timemeasurement-smoketest
   * contains a smoke test which illustrates how the contribution can be used.

== CONFIGURATION EXAMPLES: ==

Your main pom.xml:

{{{
<properties>
	<timemeasurement.version>1.4</timemeasurement.version>
	<aspectj.version>1.6.10</aspectj.version>
</properties>

<dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>com.coremedia.contribution.timemeasurement</groupId>
			<artifactId>timemeasurement-core</artifactId>
			<version>${timemeasurement.version}</version>
		</dependency>
		<dependency>
			<groupId>com.coremedia.contribution.timemeasurement</groupId>
			<artifactId>timemeasurement-annotation</artifactId>
			<version>${timemeasurement.version}</version>
		</dependency>
		<dependency>
			<groupId>com.coremedia.contribution.timemeasurement</groupId>
			<artifactId>timemeasurement-aspect</artifactId>
			<version>${timemeasurement.version}</version>
		</dependency>
	</dependencies>
</dependencyManagement>
}}}

Your Module pom.xml if you do not want to use AspectJ:
{{{
<dependencies>
	<dependency>
		<groupId>com.coremedia.contribution.timemeasurement</groupId>
		<artifactId>timemeasurement-core</artifactId>
	</dependency>
</dependencies>
}}}

Your Module pom.xml if you want to use AspectJ:

(Note: you have to use version 1.6.10 of the aspectjtools since the contribution is compiled with that version.)
{{{
<build>
	<plugins>
		<plugin>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>aspectj-maven-plugin</artifactId>
			<configuration>
				<complianceLevel>1.6</complianceLevel>
				<source>1.6</source>
				<target>1.6</target>
				<encoding>UTF-8</encoding>
			</configuration>
			<dependencies>
				<dependency>
					<groupId>org.aspectj</groupId>
					<artifactId>aspectjtools</artifactId>
					<version>${aspectj.version}</version>
				</dependency>
			</dependencies>
			<executions>
				<execution>
					<goals>
						<goal>compile</goal> <!-- use this goal to weave all your main classes -->
						<goal>test-compile</goal> <!-- use this goal to weave all your test classes -->
					</goals>
				</execution>
			</executions>
		</plugin>
	</plugins>
</build>

<dependencies>
	<dependency>
		<groupId>com.coremedia.contribution.timemeasurement</groupId>
		<artifactId>timemeasurement-core</artifactId>
	</dependency>
	<dependency>
		<groupId>com.coremedia.contribution.timemeasurement</groupId>
		<artifactId>timemeasurement-annotation</artifactId>
	</dependency>
	<dependency>
		<groupId>com.coremedia.contribution.timemeasurement</groupId>
		<artifactId>timemeasurement-aspect</artifactId>
	</dependency>
</dependencies>
}}}
